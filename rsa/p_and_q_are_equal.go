package rsa

import (
	"fmt"
	"math/big"
)

func init() {
	Strategies = append(Strategies, Strategy{
		Name: "p_and_q_are_equal",
		Func: StrategyPAndQAreEqual,
	})
}

func scriptPAndQAreEqual(n *big.Int, e *big.Int, c *big.Int, mBytes []byte) {
	fmt.Printf(
		"\n```python\n"+
			"#!/usr/bin/env python3\n\n"+
			"import gmpy2\n\n"+
			"n = %s\n"+
			"e = %s\n"+
			"c = %s\n\n"+
			"p = int(gmpy2.iroot(n, 2)[0])\n"+
			"q = p\n"+
			"assert((p * q) == n)\n\n"+
			"phi = p * (p - 1)\n"+
			"d = pow(e, -1, phi)\n"+
			"m = pow(c, d, n)\n\n"+
			"flag = m.to_bytes(length=(m.bit_length() + 7) // 8, byteorder=\"big\")\n"+
			"print(flag.decode()) # %s\n```\n\n",
		n, e, c, mBytes)
}

func pAndQAreEqual(strategy *Strategy, n *big.Int, e *big.Int, c *big.Int) {
	p := new(big.Int).Sqrt(n)

	phi := new(big.Int).Mul(p, new(big.Int).Sub(p, big.NewInt(1)))

	d := new(big.Int).Exp(e, big.NewInt(-1), phi)

	if d == nil {
		return
	}

	m := new(big.Int).Exp(c, d, n)

	mBytes := ResultChecker(strategy, m)

	if mBytes == nil {
		return
	}

	scriptPAndQAreEqual(n, e, c, mBytes)
}

func StrategyPAndQAreEqual(strategy *Strategy) {
	for _, n := range N {
		for _, e := range E {
			for _, c := range C {
				pAndQAreEqual(strategy, n, e, c)
			}
		}
	}
}

// examples:
// n = 399956368360808862373914258335185223080849636197711424060797090309268643429064461492550414549161330948819635837600839124910339139212025975705016633767495247163243281423582407941339197895052969960664399531226116807938480610953640675838340969642399505783577667601230289640157854573282615113017817753471366212008719316238931155299741896658264134636523008018510523774126757209492757800553768281613227711738371473830681563493341816035127889532515105148615575695347672918819305383651095344758737833444302556494599778991752161562622963652164008980839152347260377969421014616624263631920322958235478733540894255954351848359580013695597870908080170511403061620632540407634608773118202473287854599776791229532885611074739079107324575619148211269673210431496846247978541032947073060592123529635361112170678347924377962162254827262375685704046691718585952854410058401794022674628779309507437739620598639589987596443373586284136126401843497367142210715014480599609277532331148988390798073713743339823218981940779096432112651466716648010370850152213399051968069102663753404120592506704133217642671853086570223710424683386625314802805217882906873879240914022607713870946351691046929143491841506422542038315876506588525639983398522454145866029283449
// e = 65537
// c = 22644125297186385803212285721101686380290089858624593588464228942417644877688212364383835956263619653769244324906844180248816686517049952319431524113838480708352331162026595736354019259708442449783760846242702532176456117138374450898213788623580234048867117546091028843127595147910526821835855070663317466469650577618010308109119812464711010326075908158768138773973732088207030977470605554056485614676156104134673446546446752627654287202815354367643042773923258958887865030737447323798382020847653880886311162447594373201951226217556835030816588457674298560260109378271244834215832992407457137601161490484862135147963942227371690835380497920998286827898323068399708168699403459009009580152834747843780155917438758224782364193716322974594031272100820264364860227674838730962348140555980411714722361909800417953974064469599278274083750031569853934963716467881656073359393449142980936480726005445774158733389270553554093627622406166942859792490275434896108377393648278975530519769034633686070931694499857110956537102727286491854314244036392929790997824274724196292688659782806587688964714529943288954314300861531138101192901942534064757877725334672680909389193357725470116673323012331269218651347104807494994267835408427908717684178629
